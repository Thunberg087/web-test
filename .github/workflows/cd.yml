name: Release Action

on:
  push:
    branches: [main]

  workflow_dispatch:

jobs:
  check_version:
    name: Check version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    outputs:
      is_version_increased: ${{ steps.compare_versions.outputs.is_version_increased }}
      version: ${{ steps.package-version.outputs.current-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - run: git checkout HEAD^

      - name: get-npm-version
        id: package-version-prev
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Checkout
        uses: actions/checkout@v4

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Compare versions
        id: compare_versions
        run: |
          if [ "${{ steps.package-version-prev.outputs.current-version }}" == "${{ steps.package-version.outputs.current-version }}" ]; then
            echo "No new version, action cancelled..."
            echo "is_version_increased=false" >> "$GITHUB_OUTPUT"
          else
            echo "is_version_increased=true" >> "$GITHUB_OUTPUT"
          fi

  check_if_release_exists:
    name: Check if release exists
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: check_version
    if: needs.check_version.outputs.is_version_increased == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ github.token }}
          tag: ${{ needs.check_version.outputs.version }}
        run: |
          echo "$(gh release view "$tag" 2>&1)"
          if [ "$(gh release view "$tag" 2>&1)" == "release not found" ]; then
            echo "Release does not exist"
            echo "release_exists=false" >> "$GITHUB_OUTPUT"
          else
            echo "Release exists"
            echo "release_exists=true" >> "$GITHUB_OUTPUT"
          fi

  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   needs: [check_version, check_if_release_exists]
  #   if: needs.check_if_release_exists.outputs.release_exists == 'false'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - dockerfile: ./Dockerfile
  #           image: thunberg087/web-test
  #   permissions:
  #     contents: write
  #     packages: write

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to Thun Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.REGISTRY_USER }}
  #         password: ${{ secrets.REGISTRY_PASS }}

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ matrix.image }}

  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ${{ matrix.dockerfile  }}
  #         push: true
  #         tags: ${{ matrix.image }}:${{ needs.check_version.outputs.version }}
  #         labels: ${{ steps.meta.outputs.labels }}


  build-push-artifact:
    env:
      PROJECT_ID: gendes-api
      REGION: europe-west1
      GAR_LOCATION: europe-west1-docker.pkg.dev/gendes-api/docker-repo/
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./Dockerfile
            image: web-test
    runs-on: ubuntu-latest
    needs: [check_version, check_if_release_exists]
    if: needs.check_if_release_exists.outputs.release_exists == 'false'
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - id: "auth"
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build image
        run: docker build . --file ${{ matrix.dockerfile }} --tag ${{ env.GAR_LOCATION }}/${{ matrix.image }}:${{ needs.check_version.outputs.version }}

      - name: Push image
        run: docker push ${{ env.GAR_LOCATION }}${{ matrix.image }}:${{ needs.check_version.outputs.version }}

  # create_release:
  #   name: Create release
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   needs: [check_version, check_if_release_exists, build-push-artifact]
  #   if: needs.check_if_release_exists.outputs.release_exists == 'false'
  #   permissions:
  #     contents: write
  #     packages: write

  #   steps:
  #     - name: Create release
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #         tag: ${{ needs.check_version.outputs.version }}
  #       run: |
  #         gh release create "$tag" \
  #             --repo="$GITHUB_REPOSITORY" \
  #             --title="üè∑Ô∏è Version ${tag#v}" \
  #             --generate-notes

  # bump_dev_version:
  #   name: Bump dev version
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   needs: [check_version, check_if_release_exists, build-push-artifact, create_release]
  #   if: needs.check_if_release_exists.outputs.release_exists == 'false'
  #   permissions:
  #     contents: write
  #     packages: write

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         repository: 'Thunberg087/web-test-config'
  #         token: ${{ secrets.WEB_TEST_WRITE }}

  #     - name: Run script to update tag
  #       run: |
  #         chmod +x update_tag.sh
  #         ./update_tag.sh ${{ needs.check_version.outputs.version }}

  #     - name: Commit and push changes
  #       run: |
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git add ./app/envs/dev/version.yaml
  #         git commit -m "Update dev version to ${{ needs.check_version.outputs.version }}"
  #         git push
